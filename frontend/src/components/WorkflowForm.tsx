import React, { useState } from 'react'
import type { Workflow, PentestStep, ReportChannel, EmailConfig, TelegramConfig, SlackConfig } from '../types'
import { DragDropContext, Droppable, Draggable, type DropResult } from '@hello-pangea/dnd'
import WorkflowBuilder from './WorkflowBuilder'

type DroppableProvided = Parameters<NonNullable<React.ComponentProps<typeof Droppable>["children"]>>[0]
type DraggableProvided = Parameters<NonNullable<React.ComponentProps<typeof Draggable>["children"]>>[0]

interface Props {
  initial?: Workflow
  onSave: (wf: Workflow) => Promise<void>
}

const WORKFLOW_TEMPLATES = [
  {
    id: 'basic-recon',
    name: 'üîç Basic Reconnaissance',
    description: 'Simple subdomain and port scanning workflow',
    steps: [
      {
        id: crypto.randomUUID(),
        name: 'Subdomain Discovery',
        type: 'command' as const,
        command: 'assetfinder --subs-only {target}',
        timeout_seconds: 120,
        inputs: {}
      },
      {
        id: crypto.randomUUID(),
        name: 'Port Scan',
        type: 'command' as const,
        command: 'nmap -T4 -p- {target}',
        timeout_seconds: 300,
        inputs: {}
      },
      {
        id: crypto.randomUUID(),
        name: 'Vulnerability Summary',
        type: 'ai' as const,
        prompt: 'Analyze the scan results and provide a security assessment summary for {target}',
        timeout_seconds: 60,
        inputs: {},
        model: { provider: 'openai' as const, model: 'gpt-4o-mini' }
      },
      {
        id: crypto.randomUUID(),
        name: 'Send Security Report',
        type: 'report' as const,
        timeout_seconds: 30,
        inputs: {},
        report_config: {
          channels: [],
          subject: 'Security Assessment Report for {target}',
          template: 'Security scan completed for {target}.\n\nFindings:\n{Vulnerability Summary}\n\nGenerated by LangFlow Security Scanner'
        }
      }
    ]
  },
  {
    id: 'web-pentest',
    name: 'üåê Web Application Testing',
    description: 'Comprehensive web application security assessment',
    steps: [
      {
        id: crypto.randomUUID(),
        name: 'Directory Fuzzing',
        type: 'command' as const,
        command: 'ffuf -w wordlist.txt -u http://{target}/FUZZ -mc 200,403',
        timeout_seconds: 300,
        inputs: {}
      },
      {
        id: crypto.randomUUID(),
        name: 'Technology Detection',
        type: 'command' as const,
        command: 'whatweb {target}',
        timeout_seconds: 60,
        inputs: {}
      },
      {
        id: crypto.randomUUID(),
        name: 'Vulnerability Analysis',
        type: 'ai' as const,
        prompt: 'Based on the web technology stack and directory findings, suggest potential attack vectors for {target}',
        timeout_seconds: 90,
        inputs: {},
        model: { provider: 'openai' as const, model: 'gpt-4o-mini' }
      },
      {
        id: crypto.randomUUID(),
        name: 'Email Report',
        type: 'report' as const,
        timeout_seconds: 30,
        inputs: {},
        report_config: {
          channels: [],
          subject: 'Web Application Security Report - {target}',
          template: 'Web application security assessment completed.\n\nTarget: {target}\n\nVulnerability Analysis:\n{Vulnerability Analysis}\n\nTechnology Stack:\n{Technology Detection}'
        }
      }
    ]
  },
  {
    id: 'network-scan',
    name: 'üîó Network Assessment',
    description: 'Network discovery and service enumeration',
    steps: [
      {
        id: crypto.randomUUID(),
        name: 'Network Discovery',
        type: 'command' as const,
        command: 'nmap -sn {target}/24',
        timeout_seconds: 180,
        inputs: {}
      },
      {
        id: crypto.randomUUID(),
        name: 'Service Enumeration',
        type: 'command' as const,
        command: 'nmap -sV -sC {target}',
        timeout_seconds: 300,
        inputs: {}
      },
      {
        id: crypto.randomUUID(),
        name: 'Risk Assessment',
        type: 'ai' as const,
        prompt: 'Evaluate the discovered services and identify potential security risks for the network segment',
        timeout_seconds: 90,
        inputs: {},
        model: { provider: 'openai' as const, model: 'gpt-4o-mini' }
      },
      {
        id: crypto.randomUUID(),
        name: 'Send Network Report',
        type: 'report' as const,
        timeout_seconds: 30,
        inputs: {},
        report_config: {
          channels: [],
          subject: 'Network Security Assessment - {target}',
          template: 'Network security assessment completed.\n\nNetwork: {target}\n\nDiscovered Services:\n{Service Enumeration}\n\nRisk Assessment:\n{Risk Assessment}'
        }
      }
    ]
  }
]

export default function WorkflowForm({ initial, onSave }: Props) {
  const [workflow, setWorkflow] = useState<Workflow>(
    initial ?? { id: crypto.randomUUID(), name: '', description: '', steps: [] }
  )
  const [showBuilder, setShowBuilder] = useState(false)
  const [activeStep, setActiveStep] = useState<string | null>(null)
  const [showTemplates, setShowTemplates] = useState(!initial && workflow.steps.length === 0)
  const [errors, setErrors] = useState<Record<string, string>>({})
  const [saving, setSaving] = useState(false)

  function update<K extends keyof Workflow>(key: K, value: Workflow[K]) {
    setWorkflow({ ...workflow, [key]: value })
    // Clear error when user starts typing
    if (errors[key]) {
      setErrors({ ...errors, [key]: '' })
    }
  }

  function validateWorkflow(): boolean {
    const newErrors: Record<string, string> = {}
    
    if (!workflow.name.trim()) {
      newErrors.name = 'Workflow name is required'
    }
    
    if (workflow.steps.length === 0) {
      newErrors.steps = 'At least one step is required'
    }

    workflow.steps.forEach((step, index) => {
      if (!step.name.trim()) {
        newErrors[`step-${step.id}-name`] = 'Step name is required'
      }
      if (step.type === 'ai' && !step.prompt?.trim()) {
        newErrors[`step-${step.id}-prompt`] = 'AI prompt is required'
      }
      if (step.type === 'command' && !step.command?.trim()) {
        newErrors[`step-${step.id}-command`] = 'Command is required'
      }
      if (step.type === 'report' && (!step.report_config?.channels || step.report_config.channels.length === 0)) {
        newErrors[`step-${step.id}-channels`] = 'At least one report channel is required'
      }
    })

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  function loadTemplate(template: typeof WORKFLOW_TEMPLATES[0]) {
    setWorkflow({
      ...workflow,
      name: template.name,
      description: template.description,
      steps: template.steps.map(step => ({ ...step, id: crypto.randomUUID() }))
    })
    setShowTemplates(false)
  }

  function addStep(type: 'ai' | 'command' | 'report') {
    const step: PentestStep = {
      id: crypto.randomUUID(),
      name: type === 'ai' ? 'AI Analysis Step' : type === 'command' ? 'Command Execution Step' : 'Send Report Step',
      type,
      timeout_seconds: type === 'ai' ? 90 : type === 'command' ? 120 : 30,
      inputs: {},
    }
    if (type === 'ai') {
      step.model = { provider: 'openai', model: 'gpt-4o-mini' }
      step.prompt = ''
    } else if (type === 'command') {
      step.command = ''
    } else if (type === 'report') {
      step.report_config = {
        channels: [],
        subject: 'Report from {workflow_name}',
        template: 'Report generated from workflow execution.\n\nResults:\n{last_output}'
      }
    }
    setWorkflow({ ...workflow, steps: [...workflow.steps, step] })
    setActiveStep(step.id)
  }

  function updateStep(id: string, patch: Partial<PentestStep>) {
    setWorkflow({
      ...workflow,
      steps: workflow.steps.map((s) => (s.id === id ? { ...s, ...patch } : s)),
    })
    // Clear step-specific errors
    Object.keys(errors).forEach(key => {
      if (key.startsWith(`step-${id}-`)) {
        setErrors({ ...errors, [key]: '' })
      }
    })
  }

  function addReportChannel(stepId: string, channelType: 'email' | 'telegram' | 'slack') {
    const step = workflow.steps.find(s => s.id === stepId)
    if (!step || !step.report_config) return

    let newChannel: ReportChannel
    switch (channelType) {
      case 'email':
        newChannel = {
          type: 'email',
          config: {
            type: 'email',
            smtp_server: '',
            smtp_port: 587,
            smtp_username: '',
            smtp_password: '',
            from_email: '',
            to_emails: [],
            use_tls: true
          }
        }
        break
      case 'telegram':
        newChannel = {
          type: 'telegram',
          config: {
            type: 'telegram',
            bot_token: '',
            chat_ids: []
          }
        }
        break
      case 'slack':
        newChannel = {
          type: 'slack',
          config: {
            type: 'slack',
            webhook_url: '',
            channel: '',
            username: 'LangFlow Bot'
          }
        }
        break
    }

    updateStep(stepId, {
      report_config: {
        ...step.report_config,
        channels: [...step.report_config.channels, newChannel]
      }
    })
  }

  function updateReportChannel(stepId: string, channelIndex: number, updates: Partial<ReportChannel['config']>) {
    const step = workflow.steps.find(s => s.id === stepId)
    if (!step || !step.report_config) return

    const updatedChannels = [...step.report_config.channels]
    const currentChannel = updatedChannels[channelIndex]
    
    // Type-safe update based on channel type
    if (currentChannel.type === 'email') {
      updatedChannels[channelIndex] = {
        type: 'email',
        config: { ...currentChannel.config, ...updates } as EmailConfig
      }
    } else if (currentChannel.type === 'telegram') {
      updatedChannels[channelIndex] = {
        type: 'telegram',
        config: { ...currentChannel.config, ...updates } as TelegramConfig
      }
    } else if (currentChannel.type === 'slack') {
      updatedChannels[channelIndex] = {
        type: 'slack',
        config: { ...currentChannel.config, ...updates } as SlackConfig
      }
    }

    updateStep(stepId, {
      report_config: {
        ...step.report_config,
        channels: updatedChannels
      }
    })
  }

  function removeReportChannel(stepId: string, channelIndex: number) {
    const step = workflow.steps.find(s => s.id === stepId)
    if (!step || !step.report_config) return

    const updatedChannels = step.report_config.channels.filter((_, idx) => idx !== channelIndex)
    updateStep(stepId, {
      report_config: {
        ...step.report_config,
        channels: updatedChannels
      }
    })
  }

  function removeStep(id: string) {
    setWorkflow({ ...workflow, steps: workflow.steps.filter((s) => s.id !== id) })
    if (activeStep === id) setActiveStep(null)
  }

  function duplicateStep(id: string) {
    const step = workflow.steps.find(s => s.id === id)
    if (!step) return
    
    const newStep = { 
      ...step, 
      id: crypto.randomUUID(), 
      name: `${step.name} (Copy)` 
    }
    const index = workflow.steps.findIndex(s => s.id === id)
    const newSteps = [...workflow.steps]
    newSteps.splice(index + 1, 0, newStep)
    setWorkflow({ ...workflow, steps: newSteps })
  }

  async function handleSubmit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault()
    
    if (!validateWorkflow()) {
      return
    }

    setSaving(true)
    try {
      await onSave(workflow)
    } catch (error) {
      console.error('Failed to save workflow:', error)
    } finally {
      setSaving(false)
    }
  }

  function onDragEnd(result: DropResult) {
    if (!result.destination) return
    const items = Array.from(workflow.steps)
    const [moved] = items.splice(result.source.index, 1)
    items.splice(result.destination.index, 0, moved)
    setWorkflow({ ...workflow, steps: items })
  }

  if (showTemplates) {
    return (
      <div className="space-y-6">
        <div className="text-center">
          <h3 className="text-xl font-bold text-cyber-neonCyan mb-2">Create New Workflow</h3>
          <p className="text-gray-400">Choose a template to get started quickly, or create from scratch</p>
        </div>

        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
          {WORKFLOW_TEMPLATES.map((template) => (
            <div
              key={template.id}
              className="border border-slate-700 rounded-lg bg-cyber-panel/40 p-4 hover:shadow-neonCyan/20 hover:border-cyber-neonCyan/50 transition-all cursor-pointer"
              onClick={() => loadTemplate(template)}
            >
              <h4 className="font-semibold text-gray-200 mb-2">{template.name}</h4>
              <p className="text-sm text-gray-400 mb-3">{template.description}</p>
              <div className="flex items-center justify-between text-xs">
                <span className="text-cyber-neonCyan">{template.steps.length} steps</span>
                <span className="text-gray-500">Click to use</span>
              </div>
            </div>
          ))}
        </div>

        <div className="text-center">
          <button
            type="button"
            className="px-6 py-3 rounded-lg border border-slate-700 bg-cyber-panel/60 text-gray-200 hover:text-white hover:shadow-neonCyan transition-all"
            onClick={() => setShowTemplates(false)}
          >
            ‚ú® Start from Scratch
          </button>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h3 className="text-xl font-bold text-cyber-neonCyan">
            {initial ? 'Edit Workflow' : 'Create Workflow'}
          </h3>
          <p className="text-gray-400 text-sm">Design your security testing workflow</p>
        </div>
        {!initial && (
          <button
            type="button"
            className="text-sm text-cyber-neonCyan hover:text-white underline"
            onClick={() => setShowTemplates(true)}
          >
            üîÑ Use Template
          </button>
        )}
      </div>

      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Basic Info */}
        <div className="border border-slate-800 rounded-lg bg-cyber-panel/30 p-4 space-y-4">
          <h4 className="font-semibold text-gray-200 flex items-center gap-2">
            <span className="w-2 h-2 rounded-full bg-cyber-neonCyan"></span>
            Basic Information
          </h4>
          
          <div className="grid md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                Workflow Name *
              </label>
              <input 
                className={`w-full border rounded-lg px-3 py-2 bg-cyber-panel/60 text-gray-100 placeholder-gray-500 transition-colors ${
                  errors.name ? 'border-red-500' : 'border-slate-700 focus:border-cyber-neonCyan'
                }`}
                value={workflow.name} 
                onChange={(e) => update('name', e.target.value)} 
                placeholder="e.g., Web Application Security Scan"
                required 
              />
              {errors.name && <p className="text-cyber-neonPink text-xs mt-1">{errors.name}</p>}
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                Description
              </label>
              <textarea 
                className="w-full border border-slate-700 bg-cyber-panel/60 rounded-lg px-3 py-2 text-gray-100 placeholder-gray-500 focus:border-cyber-neonCyan transition-colors resize-none"
                value={workflow.description} 
                onChange={(e) => update('description', e.target.value)}
                placeholder="Describe what this workflow does..."
                rows={2}
              />
            </div>
          </div>
        </div>

        {/* Visual Builder Toggle */}
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <h4 className="font-semibold text-gray-200 flex items-center gap-2">
              <span className="w-2 h-2 rounded-full bg-cyber-neonGreen"></span>
              Workflow Steps ({workflow.steps.length})
            </h4>
            {errors.steps && <p className="text-cyber-neonPink text-sm">{errors.steps}</p>}
          </div>
          
          <div className="flex gap-2">
            <button 
              type="button" 
              className={`px-3 py-1.5 rounded text-sm transition-all ${
                showBuilder 
                  ? 'border border-cyber-neonCyan bg-cyber-neonCyan/20 text-cyber-neonCyan' 
                  : 'border border-slate-700 bg-cyber-panel/60 text-gray-400 hover:text-white'
              }`}
              onClick={() => setShowBuilder(!showBuilder)}
            >
              üé® Visual Builder
            </button>
          </div>
        </div>

        {/* Visual Builder */}
        {showBuilder && (
          <div className="border border-slate-800 rounded-lg bg-cyber-panel/20 p-4">
            <WorkflowBuilder value={workflow} onChange={setWorkflow} />
          </div>
        )}

        {/* Step Creation Buttons */}
        <div className="flex gap-3">
          <button 
            type="button" 
            className="flex items-center gap-2 px-4 py-2 rounded-lg border border-green-800 bg-green-900/30 text-cyber-neonGreen hover:shadow-neonGreen transition-all"
            onClick={() => addStep('ai')}
          >
            ü§ñ Add AI Step
          </button>
          <button 
            type="button" 
            className="flex items-center gap-2 px-4 py-2 rounded-lg border border-pink-800 bg-pink-900/30 text-cyber-neonPink hover:shadow-neonPink transition-all"
            onClick={() => addStep('command')}
          >
            ‚ö° Add Command Step
          </button>
          <button 
            type="button" 
            className="flex items-center gap-2 px-4 py-2 rounded-lg border border-yellow-800 bg-yellow-900/30 text-cyber-neonYellow hover:shadow-neonYellow transition-all"
            onClick={() => addStep('report')}
          >
            üìß Add Report Step
          </button>
        </div>

        {/* Steps List */}
        {workflow.steps.length > 0 && (
          <DragDropContext onDragEnd={onDragEnd}>
            <Droppable droppableId="steps">
              {(provided: DroppableProvided) => (
                <div ref={provided.innerRef} {...provided.droppableProps} className="space-y-3">
                  {workflow.steps.map((step, idx) => (
                    <Draggable key={step.id} draggableId={step.id} index={idx}>
                      {(drag: DraggableProvided) => (
                        <div
                          ref={drag.innerRef}
                          {...drag.draggableProps}
                          className={`border rounded-lg bg-cyber-panel/40 transition-all ${
                            activeStep === step.id 
                              ? 'border-cyber-neonCyan shadow-neonCyan/20' 
                              : 'border-slate-800 hover:border-slate-700'
                          }`}
                        >
                          {/* Step Header */}
                          <div className="flex items-center justify-between p-4 border-b border-slate-800">
                            <div className="flex items-center gap-3">
                              <div 
                                {...drag.dragHandleProps}
                                className="cursor-move text-gray-400 hover:text-white p-1"
                              >
                                ‚ãÆ‚ãÆ
                              </div>
                              <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold ${
                                step.type === 'ai' 
                                  ? 'bg-green-900/50 text-cyber-neonGreen border border-green-800'
                                  : step.type === 'command'
                                  ? 'bg-pink-900/50 text-cyber-neonPink border border-pink-800'
                                  : 'bg-yellow-900/50 text-cyber-neonYellow border border-yellow-800'
                              }`}>
                                {idx + 1}
                              </div>
                              <div>
                                <h5 className="font-medium text-gray-200">{step.name || 'Unnamed Step'}</h5>
                                <span className={`text-xs px-2 py-0.5 rounded ${
                                  step.type === 'ai' 
                                    ? 'bg-green-900/50 text-cyber-neonGreen' 
                                    : step.type === 'command'
                                    ? 'bg-pink-900/50 text-cyber-neonPink'
                                    : 'bg-yellow-900/50 text-cyber-neonYellow'
                                }`}>
                                  {step.type === 'ai' ? 'ü§ñ AI' : step.type === 'command' ? '‚ö° Command' : 'üìß Report'}
                                </span>
                              </div>
                            </div>
                            
                            <div className="flex items-center gap-2">
                              <button
                                type="button"
                                className="text-gray-400 hover:text-cyber-neonCyan text-sm"
                                onClick={() => duplicateStep(step.id)}
                              >
                                üìã
                              </button>
                              <button
                                type="button"
                                className={`text-sm px-2 py-1 rounded ${
                                  activeStep === step.id 
                                    ? 'text-cyber-neonCyan' 
                                    : 'text-gray-400 hover:text-white'
                                }`}
                                onClick={() => setActiveStep(activeStep === step.id ? null : step.id)}
                              >
                                {activeStep === step.id ? '‚ñº' : '‚ñ∂'}
                              </button>
                              <button
                                type="button"
                                className="text-cyber-neonPink hover:text-red-400 text-sm"
                                onClick={() => removeStep(step.id)}
                              >
                                üóëÔ∏è
                              </button>
                            </div>
                          </div>

                          {/* Step Details */}
                          {activeStep === step.id && (
                            <div className="p-4 space-y-4">
                              <div>
                                <label className="block text-sm font-medium text-gray-300 mb-2">
                                  Step Name *
                                </label>
                                <input 
                                  className={`w-full border rounded px-3 py-2 bg-cyber-panel/60 text-gray-100 ${
                                    errors[`step-${step.id}-name`] ? 'border-red-500' : 'border-slate-700'
                                  }`}
                                  value={step.name} 
                                  onChange={(e) => updateStep(step.id, { name: e.target.value })} 
                                  placeholder="Enter step name"
                                />
                                {errors[`step-${step.id}-name`] && (
                                  <p className="text-cyber-neonPink text-xs mt-1">{errors[`step-${step.id}-name`]}</p>
                                )}
                              </div>

                              {step.type === 'ai' && (
                                <div className="space-y-4">
                                  <div className="grid md:grid-cols-2 gap-4">
                                    <div>
                                      <label className="block text-sm font-medium text-gray-300 mb-2">
                                        Model
                                      </label>
                                      <select 
                                        className="w-full border border-slate-700 bg-cyber-panel/60 rounded px-3 py-2 text-gray-100"
                                        value={step.model?.model ?? 'gpt-4o-mini'}
                                        onChange={(e) => updateStep(step.id, { 
                                          model: { 
                                            provider: 'openai', 
                                            model: e.target.value, 
                                            api_key: step.model?.api_key 
                                          } 
                                        })}
                                      >
                                        <option value="gpt-4o-mini">GPT-4o Mini</option>
                                        <option value="gpt-4o">GPT-4o</option>
                                        <option value="gpt-3.5-turbo">GPT-3.5 Turbo</option>
                                      </select>
                                    </div>
                                    <div>
                                      <label className="block text-sm font-medium text-gray-300 mb-2">
                                        Timeout (seconds)
                                      </label>
                                      <input 
                                        type="number" 
                                        className="w-full border border-slate-700 bg-cyber-panel/60 rounded px-3 py-2 text-gray-100"
                                        value={step.timeout_seconds ?? 90} 
                                        onChange={(e) => updateStep(step.id, { timeout_seconds: Number(e.target.value) })} 
                                      />
                                    </div>
                                  </div>
                                  
                                  <div>
                                    <label className="block text-sm font-medium text-gray-300 mb-2">
                                      AI Prompt *
                                    </label>
                                    <textarea 
                                      className={`w-full border rounded px-3 py-2 bg-cyber-panel/60 text-gray-100 ${
                                        errors[`step-${step.id}-prompt`] ? 'border-red-500' : 'border-slate-700'
                                      }`}
                                      value={step.prompt ?? ''} 
                                      onChange={(e) => updateStep(step.id, { prompt: e.target.value })} 
                                      placeholder="Enter AI prompt... Use {variable} for dynamic values"
                                      rows={3}
                                    />
                                    {errors[`step-${step.id}-prompt`] && (
                                      <p className="text-cyber-neonPink text-xs mt-1">{errors[`step-${step.id}-prompt`]}</p>
                                    )}
                                    <p className="text-xs text-gray-500 mt-1">
                                      üí° Use variables like {'{target}'}, {'{domain}'}, or reference previous steps like {'{step1}'}
                                    </p>
                                  </div>

                                  <div>
                                    <label className="block text-sm font-medium text-gray-300 mb-2">
                                      OpenAI API Key (optional)
                                    </label>
                                    <input 
                                      type="password"
                                      className="w-full border border-slate-700 bg-cyber-panel/60 rounded px-3 py-2 text-gray-100"
                                      value={step.model?.api_key ?? ''} 
                                      onChange={(e) => updateStep(step.id, { 
                                        model: { 
                                          provider: 'openai', 
                                          model: step.model?.model ?? 'gpt-4o-mini', 
                                          api_key: e.target.value 
                                        } 
                                      })} 
                                      placeholder="Leave empty to use default API key"
                                    />
                                  </div>
                                </div>
                              )}

                              {step.type === 'command' && (
                                <div className="space-y-4">
                                  <div>
                                    <label className="block text-sm font-medium text-gray-300 mb-2">
                                      Command *
                                    </label>
                                    <input 
                                      className={`w-full border rounded px-3 py-2 bg-cyber-panel/60 text-gray-100 font-mono text-sm ${
                                        errors[`step-${step.id}-command`] ? 'border-red-500' : 'border-slate-700'
                                      }`}
                                      value={step.command ?? ''} 
                                      onChange={(e) => updateStep(step.id, { command: e.target.value })} 
                                      placeholder="nmap -sV {target}"
                                    />
                                    {errors[`step-${step.id}-command`] && (
                                      <p className="text-cyber-neonPink text-xs mt-1">{errors[`step-${step.id}-command`]}</p>
                                    )}
                                    <p className="text-xs text-gray-500 mt-1">
                                      üí° Use variables like {'{target}'} or reference previous step outputs
                                    </p>
                                  </div>

                                  <div className="grid md:grid-cols-2 gap-4">
                                    <div>
                                      <label className="block text-sm font-medium text-gray-300 mb-2">
                                        Working Directory
                                      </label>
                                      <input 
                                        className="w-full border border-slate-700 bg-cyber-panel/60 rounded px-3 py-2 text-gray-100"
                                        value={step.working_dir ?? ''} 
                                        onChange={(e) => updateStep(step.id, { working_dir: e.target.value })} 
                                        placeholder="/path/to/working/directory"
                                      />
                                    </div>
                                    <div>
                                      <label className="block text-sm font-medium text-gray-300 mb-2">
                                        Timeout (seconds)
                                      </label>
                                      <input 
                                        type="number" 
                                        className="w-full border border-slate-700 bg-cyber-panel/60 rounded px-3 py-2 text-gray-100"
                                        value={step.timeout_seconds ?? 120} 
                                        onChange={(e) => updateStep(step.id, { timeout_seconds: Number(e.target.value) })} 
                                      />
                                    </div>
                                  </div>
                                </div>
                              )}

                              {step.type === 'report' && (
                                <div className="space-y-4">
                                  <div className="grid md:grid-cols-2 gap-4">
                                    <div>
                                      <label className="block text-sm font-medium text-gray-300 mb-2">
                                        Subject
                                      </label>
                                      <input 
                                        className="w-full border border-slate-700 bg-cyber-panel/60 rounded px-3 py-2 text-gray-100"
                                        value={step.report_config?.subject ?? ''} 
                                        onChange={(e) => updateStep(step.id, { 
                                          report_config: { 
                                            ...step.report_config!, 
                                            subject: e.target.value 
                                          } 
                                        })} 
                                        placeholder="Report Subject"
                                      />
                                    </div>
                                    <div>
                                      <label className="block text-sm font-medium text-gray-300 mb-2">
                                        Timeout (seconds)
                                      </label>
                                      <input 
                                        type="number" 
                                        className="w-full border border-slate-700 bg-cyber-panel/60 rounded px-3 py-2 text-gray-100"
                                        value={step.timeout_seconds ?? 30} 
                                        onChange={(e) => updateStep(step.id, { timeout_seconds: Number(e.target.value) })} 
                                      />
                                    </div>
                                  </div>

                                  <div>
                                    <label className="block text-sm font-medium text-gray-300 mb-2">
                                      Report Template
                                    </label>
                                    <textarea 
                                      className="w-full border border-slate-700 bg-cyber-panel/60 rounded px-3 py-2 text-gray-100"
                                      value={step.report_config?.template ?? ''} 
                                      onChange={(e) => updateStep(step.id, { 
                                        report_config: { 
                                          ...step.report_config!, 
                                          template: e.target.value 
                                        } 
                                      })} 
                                      placeholder="Report template... Use {variable} for dynamic values"
                                      rows={4}
                                    />
                                    <p className="text-xs text-gray-500 mt-1">
                                      üí° Use variables like {'{target}'}, {'{workflow_name}'}, or reference previous steps
                                    </p>
                                  </div>

                                  {/* Report Channels */}
                                  <div>
                                    <div className="flex items-center justify-between mb-3">
                                      <label className="block text-sm font-medium text-gray-300">
                                        Report Channels *
                                      </label>
                                      <div className="flex gap-2">
                                        <button
                                          type="button"
                                          className="px-2 py-1 text-xs rounded border border-blue-800 bg-blue-900/30 text-blue-400 hover:shadow-blue-400/50"
                                          onClick={() => addReportChannel(step.id, 'email')}
                                        >
                                          + Email
                                        </button>
                                        <button
                                          type="button"
                                          className="px-2 py-1 text-xs rounded border border-cyan-800 bg-cyan-900/30 text-cyan-400 hover:shadow-cyan-400/50"
                                          onClick={() => addReportChannel(step.id, 'telegram')}
                                        >
                                          + Telegram
                                        </button>
                                        <button
                                          type="button"
                                          className="px-2 py-1 text-xs rounded border border-purple-800 bg-purple-900/30 text-purple-400 hover:shadow-purple-400/50"
                                          onClick={() => addReportChannel(step.id, 'slack')}
                                        >
                                          + Slack
                                        </button>
                                      </div>
                                    </div>

                                    {errors[`step-${step.id}-channels`] && (
                                      <p className="text-cyber-neonPink text-xs mb-2">{errors[`step-${step.id}-channels`]}</p>
                                    )}

                                    <div className="space-y-3">
                                      {step.report_config?.channels.map((channel, channelIdx) => (
                                        <div key={channelIdx} className="border border-slate-700 rounded p-3 bg-cyber-panel/20">
                                          <div className="flex items-center justify-between mb-3">
                                            <span className={`text-sm font-medium ${
                                              channel.type === 'email' ? 'text-blue-400' :
                                              channel.type === 'telegram' ? 'text-cyan-400' :
                                              'text-purple-400'
                                            }`}>
                                              {channel.type === 'email' ? 'üìß Email' :
                                               channel.type === 'telegram' ? 'üì± Telegram' :
                                               'üí¨ Slack'}
                                            </span>
                                            <button
                                              type="button"
                                              className="text-cyber-neonPink hover:text-red-400 text-xs"
                                              onClick={() => removeReportChannel(step.id, channelIdx)}
                                            >
                                              Remove
                                            </button>
                                          </div>

                                          {channel.type === 'email' && (
                                            <div className="grid md:grid-cols-2 gap-3">
                                              <div>
                                                <label className="block text-xs text-gray-400 mb-1">SMTP Server</label>
                                                <input 
                                                  className="w-full border border-slate-700 bg-cyber-panel/60 rounded px-2 py-1 text-gray-100 text-sm"
                                                  value={(channel.config as EmailConfig).smtp_server}
                                                  onChange={(e) => updateReportChannel(step.id, channelIdx, { smtp_server: e.target.value })}
                                                  placeholder="smtp.gmail.com"
                                                />
                                              </div>
                                              <div>
                                                <label className="block text-xs text-gray-400 mb-1">Port</label>
                                                <input 
                                                  type="number"
                                                  className="w-full border border-slate-700 bg-cyber-panel/60 rounded px-2 py-1 text-gray-100 text-sm"
                                                  value={(channel.config as EmailConfig).smtp_port}
                                                  onChange={(e) => updateReportChannel(step.id, channelIdx, { smtp_port: Number(e.target.value) })}
                                                />
                                              </div>
                                              <div>
                                                <label className="block text-xs text-gray-400 mb-1">Username</label>
                                                <input 
                                                  className="w-full border border-slate-700 bg-cyber-panel/60 rounded px-2 py-1 text-gray-100 text-sm"
                                                  value={(channel.config as EmailConfig).smtp_username}
                                                  onChange={(e) => updateReportChannel(step.id, channelIdx, { smtp_username: e.target.value })}
                                                />
                                              </div>
                                              <div>
                                                <label className="block text-xs text-gray-400 mb-1">Password</label>
                                                <input 
                                                  type="password"
                                                  className="w-full border border-slate-700 bg-cyber-panel/60 rounded px-2 py-1 text-gray-100 text-sm"
                                                  value={(channel.config as EmailConfig).smtp_password}
                                                  onChange={(e) => updateReportChannel(step.id, channelIdx, { smtp_password: e.target.value })}
                                                />
                                              </div>
                                              <div>
                                                <label className="block text-xs text-gray-400 mb-1">From Email</label>
                                                <input 
                                                  className="w-full border border-slate-700 bg-cyber-panel/60 rounded px-2 py-1 text-gray-100 text-sm"
                                                  value={(channel.config as EmailConfig).from_email}
                                                  onChange={(e) => updateReportChannel(step.id, channelIdx, { from_email: e.target.value })}
                                                />
                                              </div>
                                              <div>
                                                <label className="block text-xs text-gray-400 mb-1">To Emails (comma separated)</label>
                                                <input 
                                                  className="w-full border border-slate-700 bg-cyber-panel/60 rounded px-2 py-1 text-gray-100 text-sm"
                                                  value={(channel.config as EmailConfig).to_emails.join(', ')}
                                                  onChange={(e) => updateReportChannel(step.id, channelIdx, { 
                                                    to_emails: e.target.value.split(',').map(email => email.trim()).filter(Boolean) 
                                                  })}
                                                  placeholder="user1@example.com, user2@example.com"
                                                />
                                              </div>
                                            </div>
                                          )}

                                          {channel.type === 'telegram' && (
                                            <div className="grid md:grid-cols-2 gap-3">
                                              <div>
                                                <label className="block text-xs text-gray-400 mb-1">Bot Token</label>
                                                <input 
                                                  type="password"
                                                  className="w-full border border-slate-700 bg-cyber-panel/60 rounded px-2 py-1 text-gray-100 text-sm"
                                                  value={(channel.config as TelegramConfig).bot_token}
                                                  onChange={(e) => updateReportChannel(step.id, channelIdx, { bot_token: e.target.value })}
                                                  placeholder="123456789:ABCdefGHIjklMNOpqrsTUVwxyz"
                                                />
                                              </div>
                                              <div>
                                                <label className="block text-xs text-gray-400 mb-1">Chat IDs (comma separated)</label>
                                                <input 
                                                  className="w-full border border-slate-700 bg-cyber-panel/60 rounded px-2 py-1 text-gray-100 text-sm"
                                                  value={(channel.config as TelegramConfig).chat_ids.join(', ')}
                                                  onChange={(e) => updateReportChannel(step.id, channelIdx, { 
                                                    chat_ids: e.target.value.split(',').map(id => id.trim()).filter(Boolean) 
                                                  })}
                                                  placeholder="-123456789, @username"
                                                />
                                              </div>
                                            </div>
                                          )}

                                          {channel.type === 'slack' && (
                                            <div className="grid md:grid-cols-2 gap-3">
                                              <div className="md:col-span-2">
                                                <label className="block text-xs text-gray-400 mb-1">Webhook URL</label>
                                                <input 
                                                  type="password"
                                                  className="w-full border border-slate-700 bg-cyber-panel/60 rounded px-2 py-1 text-gray-100 text-sm"
                                                  value={(channel.config as SlackConfig).webhook_url}
                                                  onChange={(e) => updateReportChannel(step.id, channelIdx, { webhook_url: e.target.value })}
                                                  placeholder="https://hooks.slack.com/services/..."
                                                />
                                              </div>
                                              <div>
                                                <label className="block text-xs text-gray-400 mb-1">Channel (optional)</label>
                                                <input 
                                                  className="w-full border border-slate-700 bg-cyber-panel/60 rounded px-2 py-1 text-gray-100 text-sm"
                                                  value={(channel.config as SlackConfig).channel ?? ''}
                                                  onChange={(e) => updateReportChannel(step.id, channelIdx, { channel: e.target.value })}
                                                  placeholder="#security-reports"
                                                />
                                              </div>
                                              <div>
                                                <label className="block text-xs text-gray-400 mb-1">Username (optional)</label>
                                                <input 
                                                  className="w-full border border-slate-700 bg-cyber-panel/60 rounded px-2 py-1 text-gray-100 text-sm"
                                                  value={(channel.config as SlackConfig).username ?? ''}
                                                  onChange={(e) => updateReportChannel(step.id, channelIdx, { username: e.target.value })}
                                                  placeholder="LangFlow Bot"
                                                />
                                              </div>
                                            </div>
                                          )}
                                        </div>
                                      ))}

                                      {(!step.report_config?.channels || step.report_config.channels.length === 0) && (
                                        <div className="text-center py-6 border-2 border-dashed border-slate-700 rounded">
                                          <p className="text-gray-500 text-sm mb-2">No report channels configured</p>
                                          <p className="text-xs text-gray-600">Add an email, Telegram, or Slack channel above</p>
                                        </div>
                                      )}
                                    </div>
                                  </div>
                                </div>
                              )}
                            </div>
                          )}
                        </div>
                      )}
                    </Draggable>
                  ))}
                  {provided.placeholder}
                </div>
              )}
            </Droppable>
          </DragDropContext>
        )}

        {/* Empty State */}
        {workflow.steps.length === 0 && (
          <div className="text-center py-12 border-2 border-dashed border-slate-700 rounded-lg">
            <div className="text-gray-500 mb-4">
              <span className="text-4xl">üöÄ</span>
            </div>
            <h4 className="text-lg font-medium text-gray-300 mb-2">No steps added yet</h4>
            <p className="text-gray-500 mb-4">Add your first step to get started with your workflow</p>
            <div className="flex justify-center gap-3">
              <button 
                type="button" 
                className="px-4 py-2 rounded-lg border border-green-800 bg-green-900/30 text-cyber-neonGreen hover:shadow-neonGreen transition-all"
                onClick={() => addStep('ai')}
              >
                ü§ñ Add AI Step
              </button>
              <button 
                type="button" 
                className="px-4 py-2 rounded-lg border border-pink-800 bg-pink-900/30 text-cyber-neonPink hover:shadow-neonPink transition-all"
                onClick={() => addStep('command')}
              >
                ‚ö° Add Command Step
              </button>
              <button 
                type="button" 
                className="px-4 py-2 rounded-lg border border-yellow-800 bg-yellow-900/30 text-cyber-neonYellow hover:shadow-neonYellow transition-all"
                onClick={() => addStep('report')}
              >
                üìß Add Report Step
              </button>
            </div>
          </div>
        )}

        {/* Submit Button */}
        <div className="flex justify-end gap-3 pt-4 border-t border-slate-800">
          <button 
            type="button"
            className="px-6 py-2 rounded-lg border border-slate-700 bg-cyber-panel/60 text-gray-300 hover:text-white transition-all"
            onClick={() => window.history.back()}
          >
            Cancel
          </button>
          <button 
            type="submit"
            disabled={saving}
            className="px-6 py-2 rounded-lg border border-cyber-neonCyan bg-cyber-neonCyan/20 text-cyber-neonCyan hover:shadow-neonCyan transition-all disabled:opacity-50"
          >
            {saving ? 'üíæ Saving...' : 'üíæ Save Workflow'}
          </button>
        </div>
      </form>
    </div>
  )
}
